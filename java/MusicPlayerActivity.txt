package com.example.audio_player;

import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public class MusicPlayerActivity extends AppCompatActivity {

    TextView titleTv, currentTimeTV, totalTimeTv;
    SeekBar seekBar;
    ImageView PausePlay, nextBut, previousBut, MusicIcon;
    ArrayList<Audio_Modal> songsList;
    Audio_Modal currentSong;
    MediaPlayer mediaPlayer = Mymedia_player.getInstance();
    int r = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Edge-to-Edge content setup, customize if needed.
        setContentView(R.layout.activity_music_player);

        titleTv = findViewById(R.id.song_title);
        currentTimeTV = findViewById(R.id.current_time);
        totalTimeTv = findViewById(R.id.total_time);
        seekBar = findViewById(R.id.seek_bar);
        PausePlay = findViewById(R.id.Pause_Play);
        nextBut = findViewById(R.id.next);
        previousBut = findViewById(R.id.prevoious);
        MusicIcon = findViewById(R.id.music_icon_mid);
        titleTv.setSelected(true);

        songsList = (ArrayList<Audio_Modal>) getIntent().getSerializableExtra("LIST");

        // Get the index of the currently selected song
        Mymedia_player.currentIndex = getIntent().getIntExtra("CURRENT_SONG_INDEX", 0);

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        setResource();

        MusicPlayerActivity.this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mediaPlayer != null) {
                    seekBar.setProgress(mediaPlayer.getCurrentPosition());
                    currentTimeTV.setText(convert(String.valueOf(mediaPlayer.getCurrentPosition())));
                    if (mediaPlayer.isPlaying()) {
                        PausePlay.setImageResource(R.drawable.pause);
                        MusicIcon.setRotation(r++);
                    } else {
                        PausePlay.setImageResource(R.drawable.play);
                        MusicIcon.setRotation(r);
                    }
                }
                new Handler().postDelayed(this, 100);
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (mediaPlayer != null && fromUser) {
                    mediaPlayer.seekTo(progress);
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {}

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {}
        });
    }

    void setResource() {
        currentSong = songsList.get(Mymedia_player.currentIndex);
        titleTv.setText(currentSong.getTitle());
        totalTimeTv.setText(convert(currentSong.getDuration()));
        PausePlay.setOnClickListener(v -> pausePlay());
        nextBut.setOnClickListener(v -> playNext());
        previousBut.setOnClickListener(v -> playPrevious());
        playMusic();
    }

    private void playMusic() {
        mediaPlayer.reset();
        try {
            mediaPlayer.setDataSource(currentSong.getPath());
            mediaPlayer.prepare();
            mediaPlayer.start();
            seekBar.setProgress(0);
            seekBar.setMax(mediaPlayer.getDuration());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void playNext() {
        if (Mymedia_player.currentIndex == songsList.size() - 1) return;
        Mymedia_player.currentIndex += 1;
        mediaPlayer.reset();
        setResource();
    }

    private void playPrevious() {
        if (Mymedia_player.currentIndex == 0) return;
        Mymedia_player.currentIndex -= 1;
        mediaPlayer.reset();
        setResource();
    }

    private void pausePlay() {
        if (mediaPlayer.isPlaying()) {
            mediaPlayer.pause();
            PausePlay.setImageResource(R.drawable.play);
        } else {
            mediaPlayer.start();
            PausePlay.setImageResource(R.drawable.pause);
        }
    }

    public static String convert(String duration) {
        Long millis = Long.parseLong(duration);
        return String.format("%02d:%02d",
                TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1),
                TimeUnit.MILLISECONDS.toSeconds(millis) % TimeUnit.MINUTES.toSeconds(1));
    }
}
